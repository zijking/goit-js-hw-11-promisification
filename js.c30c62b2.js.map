{"version":3,"sources":["js/01-task.js","js/02-task.js","js/03-task.js","js/index.js"],"names":["delay","ms","Promise","resolv","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","reject","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch","require"],"mappings":";AAEA,IAAMA,EAAQ,SAAAC,GAEL,OAAA,IAAIC,QAAQ,SAACC,GAClBC,WAAW,WACTD,EAAOF,IACNA,MAIDI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAGnBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACgBjB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA9BA,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,EAAUC,GAEpC,OAAA,IAAId,QAAQ,SAACC,EAAQc,GAC5Bd,EAAOW,EAASI,IAAI,SAAAC,GAClBA,OAAAA,EAAKR,OAASI,EAAgBI,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCP,QAASO,EAAKP,SAAWO,QAK3Dd,EAAS,SAAAe,GAAgBb,OAAAA,QAAQc,MAAMD,IAW7CP,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC7BnC,IAAMiB,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAACC,GACjB7B,IAAAA,EAAQsB,EAA0B,IAAK,KACpC,OAAA,IAAIpB,QAAQ,SAACC,EAAQc,GAC5Bb,WAAW,WACQqB,KAAKE,SAAW,GAGjCxB,EAAO0B,EAAYC,GAAI9B,GAEvBiB,EAAOY,EAAYC,KAEpB9B,MAKC+B,EAAa,SAACD,EAAIxB,GACtBC,QAAQC,IAAmBsB,eAAAA,OAAAA,EAAmBxB,kBAAAA,OAAAA,EAA9C,QAGI0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAqCH,gCAAAA,OAAAA,EAA7C,+BAaFF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH;;ACnDTI,QAAQ,aACRA,QAAQ,aACRA,QAAQ","file":"js.c30c62b2.js","sourceRoot":"..\\src","sourcesContent":["/** 1 */\r\n\r\nconst delay = ms => {\r\n  // Твой код\r\n  return new Promise((resolv) => {\r\n    setTimeout(() => {\r\n      resolv(ms); \r\n    }, ms)\r\n  })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n//","/** 2 */\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName, callback) => {  \r\n\r\n  return new Promise((resolv, reject) => {\r\n  resolv(allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  ))\r\n})\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n//","/** 3 */\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n    return new Promise((resolv, reject) => {\r\n    setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      resolv(transaction.id, delay);\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);\r\n})\r\n  \r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n//","// console.log('Start promistification index.js')\r\n\r\nrequire('./01-task');\r\nrequire('./02-task');\r\nrequire('./03-task');\r\n\r\n\r\n\r\n\r\n\r\n"]}